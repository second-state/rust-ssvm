object signature ArithInterface = {
  add : uint * uint -> uint;
  sub : uint * uint -> uint;
  mul : uint * uint -> uint;
  div : uint * uint -> uint;
  (* mod : uint * uint -> uint; *)
}

object Arith : ArithInterface {
  let add (n, m) = 
    let c = n + m in
    assert (c >= n);
    n + m

  let sub (n, m) = 
    assert (m <= n);
    n - m

  let mul (n, m) = 
    if n = 0u0 then
      0u0
    else 
      let c = n * m in
      let d = c / n in
      assert (d = m);
      c

  let div (n, m) = 
    assert (m > 0u0);
    let c = n / m in 
    c

  (* let mod (n, m) = 
    assert (m != 0);
    n mod m *)
}
    
layer signature ARITHSig = {
  arith : ArithInterface
}

layer ARITH : [{}] ARITHSig = {
  arith = Arith
}